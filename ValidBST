// Time Complexity : O(n) where 'n' is the number of nodes.
// Space Complexity : O(h) where 'h' is the height of the tree --- Recursive Stack Space
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No

/*Approach:
Do inorder traversal of the tree
go towards left and store the node in prev
any value to the left should not be greater than the current, if so return false

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

// Iterative Approach

class Solution {
    public boolean isValidBST(TreeNode root) {
        if(root == null) {
            return true;
        }
        Stack<TreeNode> s = new Stack<>();
        TreeNode prev = null;

        while(root!=null || !s.isEmpty()) {
            while(root!=null){
                s.push(root);
                root = root.left;
            }
            root = s.pop();
            if(prev!=null && prev.val >= root.val) {
                return false;   
            }
            prev = root;
            root = root.right;
        }
        return true;
    }
}

// Recursive Approach

TC - O(N)
SC - O(N) - Recursive Stack Space

class Solution {

    TreeNode prev;
    boolean isValid;

    public boolean isValidBST(TreeNode root) {

    if (root == null) {
        return true;
    }
    prev = null;
    isValid = true;
    inOrder(root);
    return isValid;
    }

     public void inOrder(TreeNode root) {

        if(root == null){
            return;
        }
        inOrder(root.left); // Left Recursive Call
        if(prev!=null && prev.val >= root.val) {
            isValid = false;
            return;
        }
        prev = root;
        inOrder(root.right); // Right Recursive Call
     }
}

// Range based approach
//Range of minimum and maximum

/**

class Solution {

    boolean isValid;
    public boolean isValidBST(TreeNode root) {

        //Base case
        if(root == null){
            return true;
        }
        isValid = true;
        findValidity(root, null,null);
        return isValid;
    }

    public void findValidity(TreeNode root, Integer min, Integer max) {

        //Base Case
        if(root == null) {
            return;
        }

        //Logic

        //Left Recursive
        findValidity(root.left, min, root.val);
        //Root
        if((min!= null && root.val <= min) || (max!= null && root.val >= max)){
            isValid = false;
            return;
        }
        //Right Recursive
        findValidity(root.right, root.val, max);
    }

}
